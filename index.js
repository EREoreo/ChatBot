require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { OpenAI } = require('openai');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –∏ OpenAI
const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text || '';

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
  bot.sendChatAction(chatId, 'typing');

  try {
    // === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
    if (/^(—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π|–Ω–∞—Ä–∏—Å—É–π)/i.test(text)) {
      const prompt = text.replace(/^(—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π|–Ω–∞—Ä–∏—Å—É–π)\s*/i, '');

      const image = await openai.images.generate({
        model: 'dall-e-3', // –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ 'dall-e-2'
        prompt,
        n: 1,
        size: '1024x1024',
      });

      const imageUrl = image.data[0].url;
      return bot.sendPhoto(chatId, imageUrl);
    }

    // === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ChatGPT ===
    const completion = await openai.chat.completions.create({
      messages: [{ role: 'user', content: text }],
      model: 'gpt-4',
      temperature: 0.7,
      max_tokens: 1000,
    });

    const response = completion.choices[0].message.content;
    bot.sendMessage(chatId, response);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error.message || error);
    bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
  }
});

console.log('ü§ñ Telegram GPT Bot —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω...');

